// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SamClient is the client API for Sam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamClient interface {
	PublishSignedMessage(ctx context.Context, in *SignedMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type samClient struct {
	cc grpc.ClientConnInterface
}

func NewSamClient(cc grpc.ClientConnInterface) SamClient {
	return &samClient{cc}
}

func (c *samClient) PublishSignedMessage(ctx context.Context, in *SignedMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.Sam/PublishSignedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamServer is the server API for Sam service.
// All implementations must embed UnimplementedSamServer
// for forward compatibility
type SamServer interface {
	PublishSignedMessage(context.Context, *SignedMessage) (*empty.Empty, error)
	mustEmbedUnimplementedSamServer()
}

// UnimplementedSamServer must be embedded to have forward compatible implementations.
type UnimplementedSamServer struct {
}

func (UnimplementedSamServer) PublishSignedMessage(context.Context, *SignedMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSignedMessage not implemented")
}
func (UnimplementedSamServer) mustEmbedUnimplementedSamServer() {}

// UnsafeSamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamServer will
// result in compilation errors.
type UnsafeSamServer interface {
	mustEmbedUnimplementedSamServer()
}

func RegisterSamServer(s grpc.ServiceRegistrar, srv SamServer) {
	s.RegisterService(&_Sam_serviceDesc, srv)
}

func _Sam_PublishSignedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamServer).PublishSignedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Sam/PublishSignedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamServer).PublishSignedMessage(ctx, req.(*SignedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Sam",
	HandlerType: (*SamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishSignedMessage",
			Handler:    _Sam_PublishSignedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/sam/proto/sam.proto",
}
